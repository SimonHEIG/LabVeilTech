<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on La veille de Simon</title><link>http://simonmeia.github.io/LabVeilTech/posts/</link><description>Recent content in Posts on La veille de Simon</description><generator>Hugo -- gohugo.io</generator><language>fr-CH</language><copyright>&lt;a href="https://creativecommons.org/licenses/by-nc/4.0/" target="_blank" rel="noopener">CC BY-NC 4.0&lt;/a></copyright><lastBuildDate>Tue, 31 Jan 2023 00:00:00 +0000</lastBuildDate><atom:link href="http://simonmeia.github.io/LabVeilTech/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Système d'écoute</title><link>http://simonmeia.github.io/LabVeilTech/posts/systeme-decoute/</link><pubDate>Tue, 31 Jan 2023 00:00:00 +0000</pubDate><guid>http://simonmeia.github.io/LabVeilTech/posts/systeme-decoute/</guid><description>Avec l&amp;rsquo;évolution rapide des technologies, il est important de suivre l&amp;rsquo;actualité technologique pour rester à jour. Pour cela, le meilleur moyen est d’utiliser un système mis en place pour faire de la veille technologique. Ce système est composé de différentes sources, d’émetteurs et des outils qui permettent de classer et d’organiser les informations. Cet article à pour but d’expliquer le système mis en place durant le cours Laboratoire de veille technologique pour effectuer ma veille technologique.</description><content type="html"><![CDATA[<p>Avec l&rsquo;évolution rapide des technologies, il est important de suivre l&rsquo;actualité technologique pour rester à jour. Pour cela, le meilleur moyen est d’utiliser un système mis en place pour faire de la veille technologique. Ce système est composé de différentes sources, d’émetteurs et des outils qui permettent de classer et d’organiser les informations. Cet article à pour but d’expliquer le système mis en place durant le cours <strong>Laboratoire de veille technologique</strong> pour effectuer ma veille technologique.</p>
<blockquote>
<p>💡 L’explication du choix du domaine de la veille est disponible <a href="https://simonmeia.github.io/LabVeilTech/about/">ici</a> !</p>
</blockquote>
<h2 id="système-découte">Système d’écoute</h2>
<p>Passionné de développement web, j’ai depuis toujours fait un peu de veille sans vraiment le savoir. Avant de commencer le laboratoire, je suivais déjà une poignée de personnes intéressantes sur twitter ainsi que quelques steamers partageant leur sessions de coding. Je voyais donc déjà passer beaucoup d’infos mais sans les classer ou si c’était le cas, je le faisait dans un dossier favoris Chrome un peu fourre-tout.</p>
<p>Actuellement, mon système d’écoute contient les sources suivantes :</p>
<h3 id="twitter">Twitter</h3>
<p>Twitter est incontestablement le réseau social ou je passe le plus de temps. Les informations importantes pour ma veille se perdant au milieu des autres tweets j’ai décidé de créer 2 liste propres à ma veille :</p>
<ul>
<li><a href="https://twitter.com/i/lists/1620359973552197632">Veille - Personnes</a></li>
<li><a href="https://twitter.com/i/lists/1620361853091151872?s=20">Veille - Technos</a></li>
</ul>
<h3 id="newsletter">Newsletter</h3>
<p>Les newsletters étaient un média que je n’utilisait pas du tout il y a de ça 6 mois. Ce cours était donc l’occasion parfait pour tester et de voir si c’est une manière de collecter des informations qui me convient ou non. Pour ce faire, je me suis abonné aux newletters suivantes :</p>
<ul>
<li><a href="https://tldr.tech/">TLDR</a></li>
<li><a href="https://alexsoyes.com/">Alex so yes</a></li>
<li><a href="https://mansjs.substack.com/">Mansour’s newsletter</a></li>
<li><a href="https://www.imranesubstack.dev/">Irmane substack</a></li>
</ul>
<h3 id="blogs-spécialisés">Blogs spécialisés</h3>
<p>Durant mes recherches, j’ai aussi pu mettre de côtés les URL de blogs spécialisés dans mon domaine :</p>
<ul>
<li><a href="https://grafikart.fr/">Graphikart</a></li>
<li><a href="https://dev.to/">Dev.to</a></li>
<li><a href="https://hashnode.com/">Hashnode</a></li>
<li><a href="https://dzone.com/javascript">DZone</a></li>
<li><a href="https://alistapart.com/">A list apart</a></li>
</ul>
<h3 id="lives-twitch">Lives Twitch</h3>
<p>Certaines personnes présentes dans la liste twitter de veille sont aussi active sur Twitch. Je ne compte pas réellement ça comme une source de veille car je ne vais pas me diriger vers ce médias uniquement pour faire ma veille mais plus pour du divertissement tout en étant attentifs à des technologies que je ne connaitrais pas.</p>
<h3 id="conférences">Conférences</h3>
<p>Ce <a href="https://github.com/scraly/developers-conferences-agenda">repository Github</a> contient des dates de conférences portant sur des sujets touchant au développement. Il peut être intéressant de se tenir informé de ce genre d’événement.</p>
<h2 id="workflow-de-classement">Workflow de classement.</h2>
<p>Mon workflow pour classer les informations trouvées durant ma veille est très simple. Je possède une base de données Notion dans laquelle je peux classer des liens avec les tags présent dans la fiche de domaine. Avec l’extension Chrome <a href="https://chrome.google.com/webstore/detail/save-to-notion/ldmmifpegigmeammaeckplhnjbbpccmm">Save to Notion</a> je peux enregistrer les page web en les classant directement dans la base de données.</p>
<p>La seule source où le workflow change un peu est Twitter. En général, je consulte Twitter sur mon smartphone ce qui rend l’ajout à Notion des informations beaucoup moins aisé. Je sauvegarde donc dans un premier temps les tweets sur Twitter et je viens régulièrement depuis un PC sauvegarder les tweets enregistrés sur Notion.</p>
]]></content></item><item><title>Test du framework Astro</title><link>http://simonmeia.github.io/LabVeilTech/posts/test-du-framework-astro/</link><pubDate>Mon, 30 Jan 2023 00:00:00 +0000</pubDate><guid>http://simonmeia.github.io/LabVeilTech/posts/test-du-framework-astro/</guid><description>Sujet et objectifs de l&amp;rsquo;expérience En décembre dernier est sorti à été publié le site web de l’application Streali. Trouvant le design particulièrement réussi et par curiosité je me suis rendu sur le repository Github du projet et j’ai remarqué que le site avait été développé avec un framework dont je n’avais encore jamais entendu parlé : Astro.
Ayant déjà des connaissances en front-end avec Vue.js ainsi qu’en back-end avec Express.</description><content type="html"><![CDATA[<h2 id="sujet-et-objectifs-de-lexpérience">Sujet et objectifs de l&rsquo;expérience</h2>
<p>En décembre dernier est sorti à été publié le site web de l’application <em><a href="https://www.streali.com/">Streali</a></em>. Trouvant le design particulièrement réussi et par curiosité je me suis rendu sur le repository Github du projet et j’ai remarqué que le site avait été développé avec un framework dont je n’avais encore jamais entendu parlé : <strong><a href="https://astro.build/">Astro</a></strong>.</p>
<p>Ayant déjà des connaissances en front-end avec Vue.js ainsi qu’en back-end avec Express.js et Laravel, Astro paraissait comme une nouvelle manière de développer une page web. C’est la première fois que j’entendais parler d’<code>island architecture</code> ou de <code>server side rendering</code>. J’ai donc décidé de tester ce framework pour la création de mon portfolio dans le cadre d’un cours nommé <em>Profil professionnel</em>. Cela m’a aussi permis de pouvoir raconter mon expérience lors de la prise en main de ce framework pour le cours de <em>Laboratoire de veille technologique</em>.</p>
<p>Mon objectif était simple : Prendre en main un nouveau framework adoptant une approche différentes de la création de page web de celles que je connaissais déjà.</p>
<h2 id="résultat-attendu-vs-résultat-obtenu">Résultat attendu vs Résultat obtenu</h2>
<p>En utilisant <strong>Astro</strong> pour la création de mon portfolio, mon but était d’obtenir un site web fonctionnel rapidement en ayant besoin de peu de connaissances car cet une des promesses d’Astro. Le résultat obtenu correspond parfaitement à mes attentes même s’il m’a pris un peu plus de temps que prévu. Ce temps supplémentaire n’est pas réellement dû à la prise en main d’Astro mais plutôt au fait que c’était aussi la première fois que j’utilisais <em>Tailwind CSS.</em></p>
<h2 id="points-dapprentissage">Points d&rsquo;apprentissage</h2>
<p>Lors de mon utilisation d’<strong>Astro</strong> j’ai appris plusieurs choses sur ses capacités.</p>
<ol>
<li>Il est possible de générer des pages web grâce à des fichier <code>.md</code> ou <code>.mdx</code>. Cela rend la création de contenu très simplifiée comme cela peut l’être avec le <code>static site generator</code> <strong>Hugo</strong>.</li>
<li>Il est possible de créer dynamiquement des pages en fonction des données fournies par une API. Imaginons qu’une liste de produits avec leurs caractéristiques est stockée sur un serveur distant et disponible à travers une API, il suffirait de créer un template pour une page d’article et de faire une requêtes à l’API pour que les pages soient générées à la volée sans avoir à les hardcoder.</li>
<li>L’utilisation de l’<code>island architecture</code> est très utile pour générer des sites nécessitant peu de réactivité. De cette manière, la majorité du contenu est générée par le serveur (SSR) alors que la minorité de contenu nécessitant d’être réactive est côté client (CSR). Cela permet d’obtenir un site web très performant comme c’est le cas avec des générateurs de sites statiques mais en gardant un côté dynamique et réactifs par endroit. De plus le SSR favorise l’indexation dans les moteurs de recherches.</li>
</ol>
<h2 id="idéesexemples-dapplication-de-la-méthode">Idées/exemples d&rsquo;application de la méthode</h2>
<p>Après avoir utilisé <strong>Astro</strong> du début à la fin d’un projet, je dirais qu’il peut être intéressant de l’utiliser dans 2 cas de figures :</p>
<ol>
<li>Sites ayant des données d’une API à afficher. <strong>Astro</strong> facilite vraiment la création dynamique de pages pour ce genre de contenu.</li>
<li>Des sites de taille petite à moyenne ne nécessitant pas une logique trop grande. Le framework permet vraiment d’avoir un résultat très rapidement pour ce genre de projets. Notamment grâce aux <code>composants astro</code> qui peuvent se substituer à ceux de Vue ou de React pour des opérations de bases.</li>
</ol>
<hr>
<h3 id="sources">Sources</h3>
<ul>
<li>Site d&rsquo;Astro : <a href="https://astro.build/">astro.build</a></li>
<li>Documentation d&rsquo;Astro : <a href="https://docs.astro.build/en/concepts/why-astro/">docs.astro.build</a></li>
<li>Portfolio réalisé avec Astro : <a href="https://meia.dev/">meia.dev</a></li>
</ul>
]]></content></item><item><title>Vue 3 &lt;Suspense></title><link>http://simonmeia.github.io/LabVeilTech/posts/vue3-suspense/</link><pubDate>Thu, 26 Jan 2023 00:00:00 +0000</pubDate><guid>http://simonmeia.github.io/LabVeilTech/posts/vue3-suspense/</guid><description>Introduction Lors du chargement de données dans un composant, il est souvent nécessaire d’afficher un loader afin de montrer à l’utilisateur que le système n’est pas bloqué et qu’il se passe bien quelque chose. Une manière classique d’ajouter un loader est de passer directement par le composant en lui ajoutant du code indiquant que tant qu’il n’a pas reçu de données, il doit afficher un loader.
Le problème est que si plusieurs composant doivent recevoir des données, on peut vite se retrouver avec une interface plus du tout conviviale car remplie de loaders.</description><content type="html"><![CDATA[<h2 id="introduction">Introduction</h2>
<p>Lors du chargement de données dans un composant, il est souvent nécessaire d’afficher un <strong>loader</strong> afin de montrer à l’utilisateur que le système n’est pas bloqué et qu’il se passe bien quelque chose. Une manière classique d’ajouter un <strong>loader</strong> est de passer directement par le composant en lui ajoutant du code indiquant que tant qu’il n’a pas reçu de données, il doit afficher un <strong>loader</strong>.</p>
<p>Le problème est que si plusieurs composant doivent recevoir des données, on peut vite se retrouver avec une interface plus du tout conviviale car remplie de <em>loaders.</em> Pour palier ce problème, il est possible d’utiliser le <em>built-in component</em> Vue : <code>&lt;Suspense&gt;</code> .</p>
<blockquote>
<p>⚠️ <code>&lt;Suspense&gt;</code> est encore une <strong>experimental feature</strong>, il ne faut pas encore prendre pour acquis l’état actuel du composant car il pourra encore être modifié avant sa sortie officielle.</p>
</blockquote>
<h2 id="le-fonctionnement-de-suspense">Le fonctionnement de <!-- raw HTML omitted --></h2>
<p>Le principe est simple, il suffit de réunir tous les composants nécessitants un fetch de donnés entre deux balises <code>&lt;Suspense&gt;</code>. Lors du rendu initial de la page, <code>&lt;Suspense&gt;</code> va afficher le contenu par défaut du slot de chaque dépendance. Durant ce processus, <code>&lt;Suspense&gt;</code> va détecter si certaines de ses dépendances sont asynchrones. Si c’est le cas, elles entrent dans un <strong>pending state</strong>. Tant que les dépendances n’ont pas été résolues, le <strong>fallback content</strong> sera affiché. Une fois les données disponibles dans chacune des dépendances asynchrones, <code>&lt;Suspense&gt;</code> passe à l’état <strong>resolved</strong> et le contenu final est affiché.</p>
<h2 id="conclusion">Conclusion</h2>
<p>Le composant <code>&lt;Suspense&gt;</code> est donc une potentielle futur bonne pratique que tout bon développeur Vue devra adopter. Il est donc bon de se maintenir au courant de l’avancement du développement de ce composant afin d’être informé quand il sera officiellement introduit au framework.</p>
<hr>
<h3 id="sources">Sources</h3>
<ul>
<li><a href="https://fadamakis.hashnode.dev/vue-suspense-a-cleaner-way-to-manage-loading-states-54df885a52c3">Vue Suspense - A Cleaner Way to Manage Loading States</a></li>
<li><a href="https://vuejs.org/guide/built-ins/suspense.html">Suspense | Vue.js</a></li>
</ul>
]]></content></item><item><title>Wretch, the new fetch ?</title><link>http://simonmeia.github.io/LabVeilTech/posts/wretch-the-new-fetch/</link><pubDate>Wed, 18 Jan 2023 00:00:00 +0000</pubDate><guid>http://simonmeia.github.io/LabVeilTech/posts/wretch-the-new-fetch/</guid><description>Introduction La fonction JavaScript fetch est une fonction très puissante et utile qui permet aux développeurs d&amp;rsquo;effectuer des requêtes HTTP en toute simplicité. Il est devenu l&amp;rsquo;un des éléments les plus populaires de l&amp;rsquo;API JavaScript, et est largement utilisé pour les applications web. Seulement, fetch comprend aussi quelques points négatifs.
La librairie wretch a été conçue comme une amélioration construite autour de la fonction fetch de base ayant pour but de simplifier la manière d’effectuer des requêtes et de gérer les réponses.</description><content type="html"><![CDATA[<h2 id="introduction">Introduction</h2>
<p>La fonction JavaScript <code>fetch</code> est une fonction très puissante et utile qui permet aux développeurs d&rsquo;effectuer des requêtes HTTP en toute simplicité. Il est devenu l&rsquo;un des éléments les plus populaires de l&rsquo;API JavaScript, et est largement utilisé pour les applications web. Seulement, <code>fetch</code> comprend aussi quelques points négatifs.</p>
<p>La librairie <code>wretch</code> a été conçue comme une amélioration construite autour de la fonction <code>fetch</code> de base ayant pour but de simplifier la manière d’effectuer des requêtes et de gérer les réponses.</p>
<h2 id="différences-entre-wretch-et-fetch">Différences entre wretch et fetch</h2>
<p>Sur son repository Github, il est décrit que <code>wretch</code> a été créé pour réponde à 4 motivations :</p>
<h3 id="1---les-deux-callbacks">1 - Les deux callbacks</h3>
<p>La première amélioration que propose <code>wretch</code> est de simplifier la requête de base en s’affranchissant du second callback.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-jsx" data-lang="jsx"><span style="color:#75715e">// 🚩 Avec fetch
</span><span style="color:#75715e"></span><span style="color:#a6e22e">fetch</span>(<span style="color:#e6db74">&#34;examples/example.json&#34;</span>)
  .<span style="color:#a6e22e">then</span>(<span style="color:#a6e22e">response</span> =&gt; <span style="color:#a6e22e">response</span>.<span style="color:#a6e22e">json</span>())
  .<span style="color:#a6e22e">then</span>(<span style="color:#a6e22e">json</span> =&gt; {
    <span style="color:#75715e">//Do stuff with the parsed json
</span><span style="color:#75715e"></span>  });

<span style="color:#75715e">// ✅ Avec wretch
</span><span style="color:#75715e"></span><span style="color:#a6e22e">wretch</span>(<span style="color:#e6db74">&#34;examples/example.json&#34;</span>)
  .<span style="color:#a6e22e">get</span>()
  .<span style="color:#a6e22e">json</span>(<span style="color:#a6e22e">json</span> =&gt; {
    <span style="color:#75715e">// Do stuff with the parsed json
</span><span style="color:#75715e"></span>  });
</code></pre></div><h3 id="2---la-gestion-des-erreurs">2 - La gestion des erreurs</h3>
<p>Dans une utilisation classique avec un <code>try / catch</code> la fonction <code>fetch</code> renvoie uniquement un code d’erreur 200 chaque erreur. Palier ce problème devient rapidement très lourd, <code>wretch</code> propose donc une solution beaucoup plus légère.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-jsx" data-lang="jsx"><span style="color:#75715e">// 🚩 Avec fetch 
</span><span style="color:#75715e"></span><span style="color:#a6e22e">fetch</span>(<span style="color:#e6db74">&#34;anything&#34;</span>)
	.<span style="color:#a6e22e">then</span>(<span style="color:#a6e22e">response</span> =&gt; {
	  <span style="color:#66d9ef">if</span>(<span style="color:#f92672">!</span><span style="color:#a6e22e">response</span>.<span style="color:#a6e22e">ok</span>) {
	    <span style="color:#66d9ef">if</span>(<span style="color:#a6e22e">response</span>.<span style="color:#a6e22e">status</span> <span style="color:#f92672">===</span> <span style="color:#ae81ff">404</span>) <span style="color:#66d9ef">throw</span> <span style="color:#66d9ef">new</span> Error(<span style="color:#e6db74">&#34;Not found&#34;</span>)
	    <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span>(<span style="color:#a6e22e">response</span>.<span style="color:#a6e22e">status</span> <span style="color:#f92672">===</span> <span style="color:#ae81ff">401</span>) <span style="color:#66d9ef">throw</span> <span style="color:#66d9ef">new</span> Error(<span style="color:#e6db74">&#34;Unauthorized&#34;</span>)
	    <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span>(<span style="color:#a6e22e">response</span>.<span style="color:#a6e22e">status</span> <span style="color:#f92672">===</span> <span style="color:#ae81ff">418</span>) <span style="color:#66d9ef">throw</span> <span style="color:#66d9ef">new</span> Error(<span style="color:#e6db74">&#34;I&#39;m a teapot !&#34;</span>)
	    <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">throw</span> <span style="color:#66d9ef">new</span> Error(<span style="color:#e6db74">&#34;Other error&#34;</span>)
	  }<span style="color:#66d9ef">else</span> {
			<span style="color:#75715e">// ...
</span><span style="color:#75715e"></span>		}
	})
	.<span style="color:#a6e22e">then</span>(<span style="color:#a6e22e">data</span> =&gt; <span style="color:#75715e">/* ... */</span>)
	.<span style="color:#66d9ef">catch</span>(<span style="color:#a6e22e">error</span> =&gt; { <span style="color:#75715e">/* ... */</span> })

<span style="color:#75715e">// ✅ Avec wretch
</span><span style="color:#75715e"></span><span style="color:#a6e22e">wretch</span>(<span style="color:#e6db74">&#34;anything&#34;</span>)
  .<span style="color:#a6e22e">get</span>()
  .<span style="color:#a6e22e">notFound</span>(<span style="color:#a6e22e">error</span> =&gt; { <span style="color:#75715e">/* ... */</span> })
  .<span style="color:#a6e22e">unauthorized</span>(<span style="color:#a6e22e">error</span> =&gt; { <span style="color:#75715e">/* ... */</span> })
  .<span style="color:#a6e22e">error</span>(<span style="color:#ae81ff">418</span>, <span style="color:#a6e22e">error</span> =&gt; { <span style="color:#75715e">/* ... */</span> })
  .<span style="color:#a6e22e">res</span>(<span style="color:#a6e22e">response</span> =&gt; <span style="color:#75715e">/* ... */</span>)
  .<span style="color:#66d9ef">catch</span>(<span style="color:#a6e22e">error</span> =&gt; { <span style="color:#75715e">/* uncaught errors */</span> })
</code></pre></div><h3 id="3---lenvoie-aisé-dun-json">3 - L’envoie aisé d’un json</h3>
<p>Lors d’un requête <code>POST</code>  classique, envoyer un objet nécessite une sérialisation. Ce n’est plus le cas avec <code>wretch</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-jsx" data-lang="jsx"><span style="color:#75715e">// 🚩 Avec fetch 
</span><span style="color:#75715e"></span><span style="color:#a6e22e">fetch</span>(<span style="color:#e6db74">&#34;endpoint&#34;</span>, {
  <span style="color:#a6e22e">method</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;POST&#34;</span>,
  <span style="color:#a6e22e">headers</span><span style="color:#f92672">:</span> { <span style="color:#e6db74">&#34;Content-Type&#34;</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;application/json&#34;</span> },
  <span style="color:#a6e22e">body</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">JSON</span>.<span style="color:#a6e22e">stringify</span>({ <span style="color:#e6db74">&#34;hello&#34;</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;world&#34;</span> })
}).<span style="color:#a6e22e">then</span>(<span style="color:#a6e22e">response</span> =&gt; <span style="color:#75715e">/* ... */</span>)
<span style="color:#75715e">// Omitting the data retrieval and error management parts…
</span><span style="color:#75715e"></span>
<span style="color:#75715e">// ✅ Avec wretch
</span><span style="color:#75715e"></span><span style="color:#a6e22e">wretch</span>(<span style="color:#e6db74">&#34;endpoint&#34;</span>)
	.<span style="color:#a6e22e">post</span>({ <span style="color:#e6db74">&#34;hello&#34;</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;world&#34;</span> })
  .<span style="color:#a6e22e">res</span>(<span style="color:#a6e22e">response</span> =&gt; <span style="color:#75715e">/* ... */</span>)
</code></pre></div><h3 id="4---une-configuration-unique">4 - Une configuration unique</h3>
<p>Fetcher des données est souvent nécessaire à plusieurs endroit du code. En utilisant une API ayant besoin d’authentification ou autre configuration, dans une utilisation de base, il faudrait réécrire cette configuration a chaque requête. Avec <code>wretch</code> ce problème est résolu.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-jsx" data-lang="jsx"><span style="color:#75715e">// Cross origin authenticated requests on an external API
</span><span style="color:#75715e"></span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">externalApi</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">wretch</span>(<span style="color:#e6db74">&#34;http://external.api&#34;</span>) <span style="color:#75715e">// Base url
</span><span style="color:#75715e"></span>  <span style="color:#75715e">// Authorization header
</span><span style="color:#75715e"></span>  .<span style="color:#a6e22e">auth</span>(<span style="color:#e6db74">`Bearer </span><span style="color:#e6db74">${</span><span style="color:#a6e22e">token</span><span style="color:#e6db74">}</span><span style="color:#e6db74">`</span>)
  <span style="color:#75715e">// Cors fetch options
</span><span style="color:#75715e"></span>  .<span style="color:#a6e22e">options</span>({ <span style="color:#a6e22e">credentials</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;include&#34;</span>, <span style="color:#a6e22e">mode</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;cors&#34;</span> })
  <span style="color:#75715e">// Handle 403 errors
</span><span style="color:#75715e"></span>  .<span style="color:#a6e22e">resolve</span>((<span style="color:#a6e22e">_</span>) =&gt; <span style="color:#a6e22e">_</span>.<span style="color:#a6e22e">forbidden</span>(<span style="color:#a6e22e">handle403</span>));

<span style="color:#75715e">// Fetch a resource
</span><span style="color:#75715e"></span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">resource</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">await</span> <span style="color:#a6e22e">externalApi</span>
  <span style="color:#75715e">// Add a custom header for this request
</span><span style="color:#75715e"></span>  .<span style="color:#a6e22e">headers</span>({ <span style="color:#e6db74">&#34;If-Unmodified-Since&#34;</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;Wed, 21 Oct 2015 07:28:00 GMT&#34;</span> })
  .<span style="color:#a6e22e">get</span>(<span style="color:#e6db74">&#34;/resource/1&#34;</span>)
  .<span style="color:#a6e22e">json</span>(<span style="color:#a6e22e">handleResource</span>);

<span style="color:#75715e">// Post a resource
</span><span style="color:#75715e"></span><span style="color:#a6e22e">externalApi</span>
  .<span style="color:#a6e22e">url</span>(<span style="color:#e6db74">&#34;/resource&#34;</span>)
  .<span style="color:#a6e22e">post</span>({ <span style="color:#e6db74">&#34;Shiny new&#34;</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;resource object&#34;</span> })
  .<span style="color:#a6e22e">json</span>(<span style="color:#a6e22e">handleNewResourceResult</span>);
</code></pre></div><h2 id="avantages-inconvénients-et-conclusion">Avantages, inconvénients et conclusion</h2>
<table>
<thead>
<tr>
<th><strong>Avantages</strong></th>
<th><strong>Inconvénients</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>✔️ Léger (2KB)</td>
<td>❌ Un package supplémentaire</td>
</tr>
<tr>
<td>✔️ Intuitif</td>
<td>❌ Pas (encore ?) un standard</td>
</tr>
<tr>
<td>✔️ Open-source &amp; maintenu</td>
<td></td>
</tr>
<tr>
<td>✔️ Fortement typé</td>
<td></td>
</tr>
</tbody>
</table>
<p>En conclusion, <code>wretch</code> est une librairie JavaScript très utile qui permet aux développeurs d&rsquo;effectuer des requêtes HTTP en toute simplicité et plus rapidement qu&rsquo;avec la fonction <code>fetch</code> de base. Son installation ne représentant pas un poids conséquent elle est donc parfaite pour compléter la fonction originale de <code>fetch</code> et peut être intéressant à intégré dans des futurs projets javascript.</p>
<hr>
<h3 id="sources">Sources</h3>
<p>Repository Github de wretch : <a href="https://github.com/elbywan/wretch">github.com</a></p>
]]></content></item><item><title>Sustainable Web Design</title><link>http://simonmeia.github.io/LabVeilTech/posts/sustainable-web-design/</link><pubDate>Mon, 16 Jan 2023 00:00:00 +0000</pubDate><guid>http://simonmeia.github.io/LabVeilTech/posts/sustainable-web-design/</guid><description>Introduction Compte tenu des immense enjeux climatiques dans lesquels nous évoluons depuis plusieurs années, la plupart des industries ont aujourd’hui des standards énergétiques et environnementaux à respecter. Seulement, ça n’est pas encore le cas du web. Il est cependant important que le secteur commence à s’intéresser sérieusement à cette problématique afin de contribuer à l’effort global (ou presque) pour luter contre le dérèglement climatique.
Le but est de réduire les émissions de CO2 produites par la consommation de page web, et cela implique de considérer les sources qui contribuent à cette production.</description><content type="html"><![CDATA[<h2 id="introduction">Introduction</h2>
<p>Compte tenu des immense enjeux climatiques dans lesquels nous évoluons depuis plusieurs années, la plupart des industries ont aujourd’hui des standards énergétiques et environnementaux à respecter. Seulement, ça n’est pas encore le cas du web. Il est cependant important que le secteur commence à s’intéresser sérieusement à cette problématique afin de contribuer à l’effort global (ou presque) pour luter contre le dérèglement climatique.</p>
<p>Le but est de réduire les émissions de CO2 produites par la consommation de page web, et cela implique de considérer les sources qui contribuent à cette production. Seulement, ce n’est pas chose facile à mesurer car les sources de CO2 sont bien loin de nous, développeurs. Nous devons donc comprendre ce qui influe sur la quantité d&rsquo;énergie consommée pour pouvoir ensuite la réduire.</p>
<p>Pour ce faire, il est possible de prendre en compte deux variables :</p>
<ul>
<li>Le transfert de données</li>
<li>L’intensité en carbone de l’électricité</li>
</ul>
<blockquote>
<p>💡 Le site <a href="http://websitecarbon.com/">websitecarbon.com</a> permet d’évaluer les émission carbone d’un site web ainsi que d’obtenir d’autres information à ce sujet.</p>
</blockquote>
<h2 id="transfert-de-données">Transfert de données</h2>
<p>Le premier facteur a prendre en compte est le volume de données qui doit faire le trajet entre le serveur et le client. La quantité d’énergie nécessaire au transfert de données est mesurée en kWh/GB. Plus cette valeur est grande, plus les émissions de carbone nécessaire à produite l’énergie le seront aussi.</p>
<p>Pour les pages web, il est assez aisé de calculer grâce à l’outil développeur du navigateur, la quantité de données transférées au premier chargement de la page. Cette quantité de données correspond approximativement au poids de la page web. Environ la moitié de ce transfert de données sont des fichiers d&rsquo;image, ce qui en fait la principale source d&rsquo;émissions de carbone sur un site web moyen.</p>
<p>En tant que développeur, un moyen de se restreindre est d’adopter le concept du budget de performances. Le principe est simple, il s’agit de fixer un objectif de temps limite au chargement d’une page web. Ainsi, en designant pour des meilleures performances, on fait beaucoup plus attention au volume de données comprises dans nos pages et elles deviennent donc plus sustainable.</p>
<h2 id="lintensité-en-carbone-de-lélectricité">L’intensité en carbone de l’électricité</h2>
<p>Là où la pollution du transfert de données était calculée en kWh/GB, il sera ici question de gCO2/kWh. Autrement dit, cette unité représente si une source de production de l’électricité dégage beaucoup, ou non de CO2 par kWh produits. Il est donc préférable d’héberger nos sites web dans des pays ou le taux de CO2 par kWh est faible. Le site <a href="https://app.electricitymaps.com/map">electricitymaps.com</a> permet de se rendre compte de l’impacte en CO2 des différentes régions du monde ainsi de leur part de renouvelable.</p>
<p>Il est aussi nécessaire de prendre en compte la distance entre les serveurs et les utilisateurs. Plus la distance est grande, plus une quantité d’énergie importante sera nécessaire pour faire transiter les données. Ainsi, pour un site web majoritairement visité par des européens, un hébergement a faible intensité en carbone comme le Canada ne serait pas forcément un meilleur choix qu’un pays européen ayant une intensité un peu supérieure.</p>
<h2 id="comment-développer-plus-vert-">Comment développer plus vert ?</h2>
<p>La prise en compte de ces facteurs peut s’avérer être un défi, mais il est important de ne pas oublier que chaque petit geste peut contribuer à réduire l’impact sur l’environnement. En développant des pages web qui limitent le transfert de données, qui sont optimisées pour un chargement rapide et qui sont hébergées près des utilisateurs, les développeurs web peuvent contribuer à leur manière à réduire la consommation d&rsquo;énergie et à avoir un impact positif sur l’environnement.</p>
<hr>
<h3 id="sources">Sources</h3>
<p>Sustainable Web Design, An Excerpt : <a href="https://alistapart.com/article/sustainable-web-design-excerpt/">alistapart.com</a></p>
]]></content></item><item><title>The State of JS | Front-end framework</title><link>http://simonmeia.github.io/LabVeilTech/posts/state-of-js-frontend-framework/</link><pubDate>Mon, 16 Jan 2023 00:00:00 +0000</pubDate><guid>http://simonmeia.github.io/LabVeilTech/posts/state-of-js-frontend-framework/</guid><description>Introduction Comme chaque année, stateofjs.com a publié les résultats de son sondage portant sur l’utilisation du Javascript. Parmi les graphiques présentés, nous allons nous intéressé dans cet article plus particulièrement aux frameworks front-end en analysant aussi bien que possible l’onglet ranking du tableau ratio over time.
💡 Avant tout, il est important de définir les termes qui seront utiliser dans la suite de l’article :
Satisfaction : utiliserait à nouveau / (utiliserait à nouveau + n&amp;rsquo;utiliserait pas à nouveau) Intérêt : veut apprendre / (veut apprendre + pas intéressé) Utilisation : (utiliserait à nouveau + n&amp;rsquo;utiliserait pas à nouveau) / total Awareness : (total - jamais entendu) / total Les tendances actuelles Dans un premier temps, on peut remarquer que le graphique de la satisfaction et de l’intérêt sont très similaires.</description><content type="html"><![CDATA[<h2 id="introduction">Introduction</h2>
<p>Comme chaque année, <a href="https://2022.stateofjs.com/en-US/">stateofjs.com</a> a publié les résultats de son sondage portant sur l’utilisation du Javascript. Parmi les graphiques présentés, nous allons nous intéressé dans cet article plus particulièrement aux <a href="https://2022.stateofjs.com/en-US/libraries/front-end-frameworks/#front_end_frameworks_experience_ranking">frameworks front-end</a> en analysant aussi bien que possible l’onglet <strong>ranking</strong> du tableau <strong>ratio over time</strong>.</p>
<blockquote>
<p>💡 Avant tout, il est important de définir les termes qui seront utiliser dans la suite de l’article :</p>
<ul>
<li><strong>Satisfaction</strong> : utiliserait à nouveau / (utiliserait à nouveau + n&rsquo;utiliserait pas à nouveau)</li>
<li><strong>Intérêt</strong> : veut apprendre / (veut apprendre + pas intéressé)</li>
<li><strong>Utilisation</strong> : (utiliserait  à nouveau + n&rsquo;utiliserait pas à nouveau) / total</li>
<li><strong>Awareness</strong> : (total - jamais entendu) / total</li>
</ul>
</blockquote>
<h2 id="les-tendances-actuelles">Les tendances actuelles</h2>
<p>Dans un premier temps, on peut remarquer que le graphique de la satisfaction et de l’intérêt sont très similaires. Les piliers comme React et Vue sont en train de perdre des places doucement année après année dans l&rsquo;estime des développeurs. Phénomène encore accéléré pour Angular qui est en chute libre depuis plusieurs années.</p>
<p><img src="./SoJS_Retention.png" alt="Front-end framework : Satisfaction"></p>
<p>Front-end framework : Satisfaction</p>
<p><img src="./SoJS_Interest.png" alt="Front-end framework : Intérêt"></p>
<p>Front-end framework : Intérêt</p>
<h2 id="la-loi-des-plus-forts">La loi des plus forts</h2>
<p>Dans l&rsquo;autre opposé des deux graphiques, on peut voir que des frameworks plus récents comme Svelte, Qwik ou Solid sont très appréciés par la communauté front-end.</p>
<p>Paradoxalement à ces deux résultats, les graphiques d&rsquo;utilisation et d’awareness montrent que malgré un intérêt et une satisfaction diminués au fil des années, les trois géants React, Angular et Vue sont indétrônables depuis des années. On peut notamment mentionner React qui a 80 % d&rsquo;utilisation comparé à ses deux concurrents directs qui stagnent aux alentours de 50 %.</p>
<p><img src="./SoJS_Usage.png" alt="Front-end framework usage"></p>
<p>Front-end framework usage</p>
<p><img src="./SoJS_Awareness.png" alt="Front-end framework awareness"></p>
<p>Front-end framework awareness</p>
<h2 id="svelte-le-prochain-leader-">Svelte, le prochain leader ?</h2>
<p>Même si le haut de tableau de l’utilisation est occupé par des librairies bien établies depuis des années qui souffrent peu, pour l&rsquo;instant, des avis de plus en plus négatifs des développeurs, il y a peut-être un de leurs concurrents qui pourrait faire bouger les choses en 2023.</p>
<p>A la première place du graphique de l’intérêt depuis 4 ans, et oscillant entre la première et la deuxième place de du graphique de la satisfaction depuis également 4 ans, Svelte de sûr un des frameworks les plus appréciés de ces dernières années. De plus, contrairement à Solid ou Qwik, il n’a pas seulement gagné en intérêt et satisfaction mais aussi en nombre d’utilisateurs. Passant de 8% à 21% d’utilisation en 4 ans il est actuellement le 4ème framework le plus utilisé par les développeurs front-end.</p>
<p>Bien que l&rsquo;avenir reste incertain, Svelte semble être le prochain leader à surveiller de près dans les années à venir et pourrait être une technologie dans laquelle il serait judicieux d&rsquo;investir du temps pour s&rsquo;y familiariser.</p>
]]></content></item></channel></rss>