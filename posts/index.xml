<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Hello Friend NG</title><link>http://simonmeia.github.io/LabVeilTech/posts/</link><description>Recent content in Posts on Hello Friend NG</description><generator>Hugo -- gohugo.io</generator><language>fr-CH</language><copyright>&lt;a href="https://creativecommons.org/licenses/by-nc/4.0/" target="_blank" rel="noopener">CC BY-NC 4.0&lt;/a></copyright><lastBuildDate>Wed, 18 Jan 2023 00:00:00 +0000</lastBuildDate><atom:link href="http://simonmeia.github.io/LabVeilTech/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Wretch, the new fetch ?</title><link>http://simonmeia.github.io/LabVeilTech/posts/wretch-the-new-fetch/</link><pubDate>Wed, 18 Jan 2023 00:00:00 +0000</pubDate><guid>http://simonmeia.github.io/LabVeilTech/posts/wretch-the-new-fetch/</guid><description>Introduction La fonction JavaScript fetch est une fonction tr√®s puissante et utile qui permet aux d√©veloppeurs d&amp;rsquo;effectuer des requ√™tes HTTP en toute simplicit√©. Il est devenu l&amp;rsquo;un des √©l√©ments les plus populaires de l&amp;rsquo;API JavaScript, et est largement utilis√© pour les applications web. Seulement, fetch comprend aussi quelques points n√©gatifs.
La librairie wretch a √©t√© con√ßue comme une am√©lioration construite autour de la fonction fetch de base ayant pour but de simplifier la mani√®re d‚Äôeffectuer des requ√™tes et de g√©rer les r√©ponses.</description><content type="html"><![CDATA[<h2 id="introduction">Introduction</h2>
<p>La fonction JavaScript <code>fetch</code> est une fonction tr√®s puissante et utile qui permet aux d√©veloppeurs d&rsquo;effectuer des requ√™tes HTTP en toute simplicit√©. Il est devenu l&rsquo;un des √©l√©ments les plus populaires de l&rsquo;API JavaScript, et est largement utilis√© pour les applications web. Seulement, <code>fetch</code> comprend aussi quelques points n√©gatifs.</p>
<p>La librairie <code>wretch</code> a √©t√© con√ßue comme une am√©lioration construite autour de la fonction <code>fetch</code> de base ayant pour but de simplifier la mani√®re d‚Äôeffectuer des requ√™tes et de g√©rer les r√©ponses.</p>
<h2 id="diff√©rences-entre-wretch-et-fetch">Diff√©rences entre wretch et fetch</h2>
<p>Sur son repository Github, il est d√©crit que <code>wretch</code> a √©t√© cr√©√© pour r√©ponde √† 4 motivations :</p>
<h3 id="1---les-deux-callbacks">1 - Les deux callbacks</h3>
<p>La premi√®re am√©lioration que propose <code>wretch</code> est de simplifier la requ√™te de base en s‚Äôaffranchissant du second callback.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-jsx" data-lang="jsx"><span style="color:#75715e">// üö© Avec fetch
</span><span style="color:#75715e"></span><span style="color:#a6e22e">fetch</span>(<span style="color:#e6db74">&#34;examples/example.json&#34;</span>)
  .<span style="color:#a6e22e">then</span>(<span style="color:#a6e22e">response</span> =&gt; <span style="color:#a6e22e">response</span>.<span style="color:#a6e22e">json</span>())
  .<span style="color:#a6e22e">then</span>(<span style="color:#a6e22e">json</span> =&gt; {
    <span style="color:#75715e">//Do stuff with the parsed json
</span><span style="color:#75715e"></span>  });

<span style="color:#75715e">// ‚úÖ Avec wretch
</span><span style="color:#75715e"></span><span style="color:#a6e22e">wretch</span>(<span style="color:#e6db74">&#34;examples/example.json&#34;</span>)
  .<span style="color:#a6e22e">get</span>()
  .<span style="color:#a6e22e">json</span>(<span style="color:#a6e22e">json</span> =&gt; {
    <span style="color:#75715e">// Do stuff with the parsed json
</span><span style="color:#75715e"></span>  });
</code></pre></div><h3 id="2---la-gestion-des-erreurs">2 - La gestion des erreurs</h3>
<p>Dans une utilisation classique avec un <code>try / catch</code> la fonction <code>fetch</code> renvoie uniquement un code d‚Äôerreur 200 chaque erreur. Palier ce probl√®me devient rapidement tr√®s lourd, <code>wretch</code> propose donc une solution beaucoup plus l√©g√®re.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-jsx" data-lang="jsx"><span style="color:#75715e">// üö© Avec fetch 
</span><span style="color:#75715e"></span><span style="color:#a6e22e">fetch</span>(<span style="color:#e6db74">&#34;anything&#34;</span>)
	.<span style="color:#a6e22e">then</span>(<span style="color:#a6e22e">response</span> =&gt; {
	  <span style="color:#66d9ef">if</span>(<span style="color:#f92672">!</span><span style="color:#a6e22e">response</span>.<span style="color:#a6e22e">ok</span>) {
	    <span style="color:#66d9ef">if</span>(<span style="color:#a6e22e">response</span>.<span style="color:#a6e22e">status</span> <span style="color:#f92672">===</span> <span style="color:#ae81ff">404</span>) <span style="color:#66d9ef">throw</span> <span style="color:#66d9ef">new</span> Error(<span style="color:#e6db74">&#34;Not found&#34;</span>)
	    <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span>(<span style="color:#a6e22e">response</span>.<span style="color:#a6e22e">status</span> <span style="color:#f92672">===</span> <span style="color:#ae81ff">401</span>) <span style="color:#66d9ef">throw</span> <span style="color:#66d9ef">new</span> Error(<span style="color:#e6db74">&#34;Unauthorized&#34;</span>)
	    <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span>(<span style="color:#a6e22e">response</span>.<span style="color:#a6e22e">status</span> <span style="color:#f92672">===</span> <span style="color:#ae81ff">418</span>) <span style="color:#66d9ef">throw</span> <span style="color:#66d9ef">new</span> Error(<span style="color:#e6db74">&#34;I&#39;m a teapot !&#34;</span>)
	    <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">throw</span> <span style="color:#66d9ef">new</span> Error(<span style="color:#e6db74">&#34;Other error&#34;</span>)
	  }<span style="color:#66d9ef">else</span> {
			<span style="color:#75715e">// ...
</span><span style="color:#75715e"></span>		}
	})
	.<span style="color:#a6e22e">then</span>(<span style="color:#a6e22e">data</span> =&gt; <span style="color:#75715e">/* ... */</span>)
	.<span style="color:#66d9ef">catch</span>(<span style="color:#a6e22e">error</span> =&gt; { <span style="color:#75715e">/* ... */</span> })

<span style="color:#75715e">// ‚úÖ Avec wretch
</span><span style="color:#75715e"></span><span style="color:#a6e22e">wretch</span>(<span style="color:#e6db74">&#34;anything&#34;</span>)
  .<span style="color:#a6e22e">get</span>()
  .<span style="color:#a6e22e">notFound</span>(<span style="color:#a6e22e">error</span> =&gt; { <span style="color:#75715e">/* ... */</span> })
  .<span style="color:#a6e22e">unauthorized</span>(<span style="color:#a6e22e">error</span> =&gt; { <span style="color:#75715e">/* ... */</span> })
  .<span style="color:#a6e22e">error</span>(<span style="color:#ae81ff">418</span>, <span style="color:#a6e22e">error</span> =&gt; { <span style="color:#75715e">/* ... */</span> })
  .<span style="color:#a6e22e">res</span>(<span style="color:#a6e22e">response</span> =&gt; <span style="color:#75715e">/* ... */</span>)
  .<span style="color:#66d9ef">catch</span>(<span style="color:#a6e22e">error</span> =&gt; { <span style="color:#75715e">/* uncaught errors */</span> })
</code></pre></div><h3 id="3---lenvoie-ais√©-dun-json">3 - L‚Äôenvoie ais√© d‚Äôun json</h3>
<p>Lors d‚Äôun requ√™te <code>POST</code>  classique, envoyer un objet n√©cessite une s√©rialisation. Ce n‚Äôest plus le cas avec <code>wretch</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-jsx" data-lang="jsx"><span style="color:#75715e">// üö© Avec fetch 
</span><span style="color:#75715e"></span><span style="color:#a6e22e">fetch</span>(<span style="color:#e6db74">&#34;endpoint&#34;</span>, {
  <span style="color:#a6e22e">method</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;POST&#34;</span>,
  <span style="color:#a6e22e">headers</span><span style="color:#f92672">:</span> { <span style="color:#e6db74">&#34;Content-Type&#34;</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;application/json&#34;</span> },
  <span style="color:#a6e22e">body</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">JSON</span>.<span style="color:#a6e22e">stringify</span>({ <span style="color:#e6db74">&#34;hello&#34;</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;world&#34;</span> })
}).<span style="color:#a6e22e">then</span>(<span style="color:#a6e22e">response</span> =&gt; <span style="color:#75715e">/* ... */</span>)
<span style="color:#75715e">// Omitting the data retrieval and error management parts‚Ä¶
</span><span style="color:#75715e"></span>
<span style="color:#75715e">// ‚úÖ Avec wretch
</span><span style="color:#75715e"></span><span style="color:#a6e22e">wretch</span>(<span style="color:#e6db74">&#34;endpoint&#34;</span>)
	.<span style="color:#a6e22e">post</span>({ <span style="color:#e6db74">&#34;hello&#34;</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;world&#34;</span> })
  .<span style="color:#a6e22e">res</span>(<span style="color:#a6e22e">response</span> =&gt; <span style="color:#75715e">/* ... */</span>)
</code></pre></div><h3 id="4---une-configuration-unique">4 - Une configuration unique</h3>
<p>Fetcher des donn√©es est souvent n√©cessaire √† plusieurs endroit du code. En utilisant une API ayant besoin d‚Äôauthentification ou autre configuration, dans une utilisation de base, il faudrait r√©√©crire cette configuration a chaque requ√™te. Avec <code>wretch</code> ce probl√®me est r√©solu.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-jsx" data-lang="jsx"><span style="color:#75715e">// Cross origin authenticated requests on an external API
</span><span style="color:#75715e"></span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">externalApi</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">wretch</span>(<span style="color:#e6db74">&#34;http://external.api&#34;</span>) <span style="color:#75715e">// Base url
</span><span style="color:#75715e"></span>  <span style="color:#75715e">// Authorization header
</span><span style="color:#75715e"></span>  .<span style="color:#a6e22e">auth</span>(<span style="color:#e6db74">`Bearer </span><span style="color:#e6db74">${</span><span style="color:#a6e22e">token</span><span style="color:#e6db74">}</span><span style="color:#e6db74">`</span>)
  <span style="color:#75715e">// Cors fetch options
</span><span style="color:#75715e"></span>  .<span style="color:#a6e22e">options</span>({ <span style="color:#a6e22e">credentials</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;include&#34;</span>, <span style="color:#a6e22e">mode</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;cors&#34;</span> })
  <span style="color:#75715e">// Handle 403 errors
</span><span style="color:#75715e"></span>  .<span style="color:#a6e22e">resolve</span>((<span style="color:#a6e22e">_</span>) =&gt; <span style="color:#a6e22e">_</span>.<span style="color:#a6e22e">forbidden</span>(<span style="color:#a6e22e">handle403</span>));

<span style="color:#75715e">// Fetch a resource
</span><span style="color:#75715e"></span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">resource</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">await</span> <span style="color:#a6e22e">externalApi</span>
  <span style="color:#75715e">// Add a custom header for this request
</span><span style="color:#75715e"></span>  .<span style="color:#a6e22e">headers</span>({ <span style="color:#e6db74">&#34;If-Unmodified-Since&#34;</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;Wed, 21 Oct 2015 07:28:00 GMT&#34;</span> })
  .<span style="color:#a6e22e">get</span>(<span style="color:#e6db74">&#34;/resource/1&#34;</span>)
  .<span style="color:#a6e22e">json</span>(<span style="color:#a6e22e">handleResource</span>);

<span style="color:#75715e">// Post a resource
</span><span style="color:#75715e"></span><span style="color:#a6e22e">externalApi</span>
  .<span style="color:#a6e22e">url</span>(<span style="color:#e6db74">&#34;/resource&#34;</span>)
  .<span style="color:#a6e22e">post</span>({ <span style="color:#e6db74">&#34;Shiny new&#34;</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;resource object&#34;</span> })
  .<span style="color:#a6e22e">json</span>(<span style="color:#a6e22e">handleNewResourceResult</span>);
</code></pre></div><h2 id="avantages-inconv√©nients-et-conclusion">Avantages, inconv√©nients et conclusion</h2>
<table>
<thead>
<tr>
<th><strong>Avantages</strong></th>
<th><strong>Inconv√©nients</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>‚úîÔ∏è L√©ger (2KB)</td>
<td>‚ùå Un package suppl√©mentaire</td>
</tr>
<tr>
<td>‚úîÔ∏è Intuitif</td>
<td>‚ùå Pas (encore ?) un standard</td>
</tr>
<tr>
<td>‚úîÔ∏è Open-source &amp; maintenu</td>
<td></td>
</tr>
<tr>
<td>‚úîÔ∏è Fortement typ√©</td>
<td></td>
</tr>
</tbody>
</table>
<p>En conclusion, <code>wretch</code> est une librairie JavaScript tr√®s utile qui permet aux d√©veloppeurs d&rsquo;effectuer des requ√™tes HTTP en toute simplicit√© et plus rapidement qu&rsquo;avec la fonction <code>fetch</code> de base. Son installation ne repr√©sentant pas un poids cons√©quent elle est donc parfaite pour compl√©ter la fonction originale de <code>fetch</code> et peut √™tre int√©ressant √† int√©gr√© dans des futurs projets javascript.</p>
<hr>
<h3 id="sources">Sources</h3>
<p>Repository Github de wretch : <a href="https://github.com/elbywan/wretch">github.com</a></p>
]]></content></item><item><title>Sustainable Web Design</title><link>http://simonmeia.github.io/LabVeilTech/posts/sustainable-web-design/</link><pubDate>Mon, 16 Jan 2023 00:00:00 +0000</pubDate><guid>http://simonmeia.github.io/LabVeilTech/posts/sustainable-web-design/</guid><description>Introduction Compte tenu des immense enjeux climatiques dans lesquels nous √©voluons depuis plusieurs ann√©es, la plupart des industries ont aujourd‚Äôhui des standards √©nerg√©tiques et environnementaux √† respecter. Seulement, √ßa n‚Äôest pas encore le cas du web. Il est cependant important que le secteur commence √† s‚Äôint√©resser s√©rieusement √† cette probl√©matique afin de contribuer √† l‚Äôeffort global (ou presque) pour luter contre le d√©r√®glement climatique.
Le but est de r√©duire les √©missions de CO2 produites par la consommation de page web, et cela implique de consid√©rer les sources qui contribuent √† cette production.</description><content type="html"><![CDATA[<h2 id="introduction">Introduction</h2>
<p>Compte tenu des immense enjeux climatiques dans lesquels nous √©voluons depuis plusieurs ann√©es, la plupart des industries ont aujourd‚Äôhui des standards √©nerg√©tiques et environnementaux √† respecter. Seulement, √ßa n‚Äôest pas encore le cas du web. Il est cependant important que le secteur commence √† s‚Äôint√©resser s√©rieusement √† cette probl√©matique afin de contribuer √† l‚Äôeffort global (ou presque) pour luter contre le d√©r√®glement climatique.</p>
<p>Le but est de r√©duire les √©missions de CO2 produites par la consommation de page web, et cela implique de consid√©rer les sources qui contribuent √† cette production. Seulement, ce n‚Äôest pas chose facile √† mesurer car les sources de CO2 sont bien loin de nous, d√©veloppeurs. Nous devons donc comprendre ce qui influe sur la quantit√© d&rsquo;√©nergie consomm√©e pour pouvoir ensuite la r√©duire.</p>
<p>Pour ce faire, il est possible de prendre en compte deux variables :</p>
<ul>
<li>Le transfert de donn√©es</li>
<li>L‚Äôintensit√© en carbone de l‚Äô√©lectricit√©</li>
</ul>
<blockquote>
<p>üí° Le site <a href="http://websitecarbon.com/">websitecarbon.com</a> permet d‚Äô√©valuer les √©mission carbone d‚Äôun site web ainsi que d‚Äôobtenir d‚Äôautres information √† ce sujet.</p>
</blockquote>
<h2 id="transfert-de-donn√©es">Transfert de donn√©es</h2>
<p>Le premier facteur a prendre en compte est le volume de donn√©es qui doit faire le trajet entre le serveur et le client. La quantit√© d‚Äô√©nergie n√©cessaire au transfert de donn√©es est mesur√©e en kWh/GB. Plus cette valeur est grande, plus les √©missions de carbone n√©cessaire √† produite l‚Äô√©nergie le seront aussi.</p>
<p>Pour les pages web, il est assez ais√© de calculer gr√¢ce √† l‚Äôoutil d√©veloppeur du navigateur, la quantit√© de donn√©es transf√©r√©es au premier chargement de la page. Cette quantit√© de donn√©es correspond approximativement au poids de la page web. Environ la moiti√© de ce transfert de donn√©es sont des fichiers d&rsquo;image, ce qui en fait la principale source d&rsquo;√©missions de carbone sur un site web moyen.</p>
<p>En tant que d√©veloppeur, un moyen de se restreindre est d‚Äôadopter le concept du budget de performances. Le principe est simple, il s‚Äôagit de fixer un objectif de temps limite au chargement d‚Äôune page web. Ainsi, en designant pour des meilleures performances, on fait beaucoup plus attention au volume de donn√©es comprises dans nos pages et elles deviennent donc plus sustainable.</p>
<h2 id="lintensit√©-en-carbone-de-l√©lectricit√©">L‚Äôintensit√© en carbone de l‚Äô√©lectricit√©</h2>
<p>L√† o√π la pollution du transfert de donn√©es √©tait calcul√©e en kWh/GB, il sera ici question de gCO2/kWh. Autrement dit, cette unit√© repr√©sente si une source de production de l‚Äô√©lectricit√© d√©gage beaucoup, ou non de CO2 par kWh produits. Il est donc pr√©f√©rable d‚Äôh√©berger nos sites web dans des pays ou le taux de CO2 par kWh est faible. Le site <a href="https://app.electricitymaps.com/map">electricitymaps.com</a> permet de se rendre compte de l‚Äôimpacte en CO2 des diff√©rentes r√©gions du monde ainsi de leur part de renouvelable.</p>
<p>Il est aussi n√©cessaire de prendre en compte la distance entre les serveurs et les utilisateurs. Plus la distance est grande, plus une quantit√© d‚Äô√©nergie importante sera n√©cessaire pour faire transiter les donn√©es. Ainsi, pour un site web majoritairement visit√© par des europ√©ens, un h√©bergement a faible intensit√© en carbone comme le Canada ne serait pas forc√©ment un meilleur choix qu‚Äôun pays europ√©en ayant une intensit√© un peu sup√©rieure.</p>
<h2 id="comment-d√©velopper-plus-vert-">Comment d√©velopper plus vert ?</h2>
<p>La prise en compte de ces facteurs peut s‚Äôav√©rer √™tre un d√©fi, mais il est important de ne pas oublier que chaque petit geste peut contribuer √† r√©duire l‚Äôimpact sur l‚Äôenvironnement. En d√©veloppant des pages web qui limitent le transfert de donn√©es, qui sont optimis√©es pour un chargement rapide et qui sont h√©berg√©es pr√®s des utilisateurs, les d√©veloppeurs web peuvent contribuer √† leur mani√®re √† r√©duire la consommation d&rsquo;√©nergie et √† avoir un impact positif sur l‚Äôenvironnement.</p>
<hr>
<h3 id="sources">Sources</h3>
<p>Sustainable Web Design, An Excerpt : <a href="https://alistapart.com/article/sustainable-web-design-excerpt/">alistapart.com</a></p>
]]></content></item><item><title>The State of JS | Front-end framework</title><link>http://simonmeia.github.io/LabVeilTech/posts/state-of-js-frontend-framework/</link><pubDate>Mon, 16 Jan 2023 00:00:00 +0000</pubDate><guid>http://simonmeia.github.io/LabVeilTech/posts/state-of-js-frontend-framework/</guid><description>Introduction Comme chaque ann√©e, stateofjs.com a publi√© les r√©sultats de son sondage portant sur l‚Äôutilisation du Javascript. Parmi les graphiques pr√©sent√©s, nous allons nous int√©ress√© dans cet article plus particuli√®rement aux frameworks front-end en analysant aussi bien que possible l‚Äôonglet ranking du tableau ratio over time.
üí° Avant tout, il est important de d√©finir les termes qui seront utiliser dans la suite de l‚Äôarticle :
Satisfaction : utiliserait √† nouveau / (utiliserait √† nouveau + n&amp;rsquo;utiliserait pas √† nouveau) Int√©r√™t : veut apprendre / (veut apprendre + pas int√©ress√©) Utilisation : (utiliserait √† nouveau + n&amp;rsquo;utiliserait pas √† nouveau) / total Awareness : (total - jamais entendu) / total Les tendances actuelles Dans un premier temps, on peut remarquer que le graphique de la satisfaction et de l‚Äôint√©r√™t sont tr√®s similaires.</description><content type="html"><![CDATA[<h2 id="introduction">Introduction</h2>
<p>Comme chaque ann√©e, <a href="https://2022.stateofjs.com/en-US/">stateofjs.com</a> a publi√© les r√©sultats de son sondage portant sur l‚Äôutilisation du Javascript. Parmi les graphiques pr√©sent√©s, nous allons nous int√©ress√© dans cet article plus particuli√®rement aux <a href="https://2022.stateofjs.com/en-US/libraries/front-end-frameworks/#front_end_frameworks_experience_ranking">frameworks front-end</a> en analysant aussi bien que possible l‚Äôonglet <strong>ranking</strong> du tableau <strong>ratio over time</strong>.</p>
<blockquote>
<p>üí° Avant tout, il est important de d√©finir les termes qui seront utiliser dans la suite de l‚Äôarticle :</p>
<ul>
<li><strong>Satisfaction</strong> : utiliserait √† nouveau / (utiliserait √† nouveau + n&rsquo;utiliserait pas √† nouveau)</li>
<li><strong>Int√©r√™t</strong> : veut apprendre / (veut apprendre + pas int√©ress√©)</li>
<li><strong>Utilisation</strong> : (utiliserait  √† nouveau + n&rsquo;utiliserait pas √† nouveau) / total</li>
<li><strong>Awareness</strong> : (total - jamais entendu) / total</li>
</ul>
</blockquote>
<h2 id="les-tendances-actuelles">Les tendances actuelles</h2>
<p>Dans un premier temps, on peut remarquer que le graphique de la satisfaction et de l‚Äôint√©r√™t sont tr√®s similaires. Les piliers comme React et Vue sont en train de perdre des places doucement ann√©e apr√®s ann√©e dans l&rsquo;estime des d√©veloppeurs. Ph√©nom√®ne encore acc√©l√©r√© pour Angular qui est en chute libre depuis plusieurs ann√©es.</p>
<p><img src="./SoJS_Retention.png" alt="Front-end framework : Satisfaction"></p>
<p>Front-end framework : Satisfaction</p>
<p><img src="./SoJS_Interest.png" alt="Front-end framework : Int√©r√™t"></p>
<p>Front-end framework : Int√©r√™t</p>
<h2 id="la-loi-des-plus-forts">La loi des plus forts</h2>
<p>Dans l&rsquo;autre oppos√© des deux graphiques, on peut voir que des frameworks plus r√©cents comme Svelte, Qwik ou Solid sont tr√®s appr√©ci√©s par la communaut√© front-end.</p>
<p>Paradoxalement √† ces deux r√©sultats, les graphiques d&rsquo;utilisation et d‚Äôawareness montrent que malgr√© un int√©r√™t et une satisfaction diminu√©s au fil des ann√©es, les trois g√©ants React, Angular et Vue sont ind√©tr√¥nables depuis des ann√©es. On peut notamment mentionner React qui a 80 % d&rsquo;utilisation compar√© √† ses deux concurrents directs qui stagnent aux alentours de 50 %.</p>
<p><img src="./SoJS_Usage.png" alt="Front-end framework usage"></p>
<p>Front-end framework usage</p>
<p><img src="./SoJS_Awareness.png" alt="Front-end framework awareness"></p>
<p>Front-end framework awareness</p>
<h2 id="svelte-le-prochain-leader-">Svelte, le prochain leader ?</h2>
<p>M√™me si le haut de tableau de l‚Äôutilisation est occup√© par des librairies bien √©tablies depuis des ann√©es qui souffrent peu, pour l&rsquo;instant, des avis de plus en plus n√©gatifs des d√©veloppeurs, il y a peut-√™tre un de leurs concurrents qui pourrait faire bouger les choses en 2023.</p>
<p>A la premi√®re place du graphique de l‚Äôint√©r√™t depuis 4 ans, et oscillant entre la premi√®re et la deuxi√®me place de du graphique de la satisfaction depuis √©galement 4 ans, Svelte de s√ªr un des frameworks les plus appr√©ci√©s de ces derni√®res ann√©es. De plus, contrairement √† Solid ou Qwik, il n‚Äôa pas seulement gagn√© en int√©r√™t et satisfaction mais aussi en nombre d‚Äôutilisateurs. Passant de 8% √† 21% d‚Äôutilisation en 4 ans il est actuellement le 4√®me framework le plus utilis√© par les d√©veloppeurs front-end.</p>
<p>Bien que l&rsquo;avenir reste incertain, Svelte semble √™tre le prochain leader √† surveiller de pr√®s dans les ann√©es √† venir et pourrait √™tre une technologie dans laquelle il serait judicieux d&rsquo;investir du temps pour s&rsquo;y familiariser.</p>
]]></content></item></channel></rss>